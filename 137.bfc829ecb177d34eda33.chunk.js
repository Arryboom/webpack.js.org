(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{431:function(n,s,a){"use strict";a.r(s),s.default='<p><a href="https://npmjs.com/package/copy-webpack-plugin"><img src="https://img.shields.io/npm/v/copy-webpack-plugin.svg" alt="npm"></a>\n<a href="https://nodejs.org/"><img src="https://img.shields.io/node/v/copy-webpack-plugin.svg" alt="node"></a>\n<a href="https://david-dm.org/webpack-contrib/copy-webpack-plugin"><img src="https://david-dm.org/webpack-contrib/copy-webpack-plugin.svg" alt="deps"></a>\n<a href="https://github.com/webpack-contrib/copy-webpack-plugin/actions"><img src="https://github.com/webpack-contrib/copy-webpack-plugin/workflows/copy-webpack-plugin/badge.svg" alt="tests"></a>\n<a href="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin"><img src="https://codecov.io/gh/webpack-contrib/copy-webpack-plugin/branch/master/graph/badge.svg" alt="cover"></a>\n<a href="https://gitter.im/webpack/webpack"><img src="https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg" alt="chat"></a>\n<a href="https://packagephobia.now.sh/result?p=copy-webpack-plugin"><img src="https://packagephobia.now.sh/badge?p=copy-webpack-plugin" alt="size"></a></p>\n<p>Copies individual files or entire directories, which already exist, to the build directory.</p>\n<h2>Getting Started</h2>\n<p>To begin, you\'ll need to install <code>copy-webpack-plugin</code>:</p>\n<pre><code class="hljs language-console">$ npm install copy-webpack-plugin --save-dev\n</code></pre>\n<p>Then add the plugin to your <code>webpack</code> config. For example:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'source\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'dest\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'other\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'public\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<blockquote>\n<p>ℹ️ <code>webpack-copy-plugin</code> is not designed to copy files generated from the build process; rather, it is to copy files that already exist in the source tree, as part of the build process.</p>\n<p>ℹ️ If you want <code>webpack-dev-server</code> to write files to the output directory during development, you can force it with the <a href="https://github.com/webpack/webpack-dev-middleware#writetodisk"><code>writeToDisk</code></a> option or the <a href="https://github.com/gajus/write-file-webpack-plugin"><code>write-file-webpack-plugin</code></a>.</p>\n</blockquote>\n<h2>Options</h2>\n<p>The plugin\'s signature:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js"><span class="token keyword">const</span> CopyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'copy-webpack-plugin\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'source\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'dest\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'other\'</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">\'public\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        concurrency<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3>Patterns</h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#from"><code>from</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Glob or path from where we сopy files.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#to"><code>to</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>compiler.options.output</code></td>\n<td align="left">Output path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#context"><code>context</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>options.context \\|\\| compiler.options.context</code></td>\n<td align="left">A path that determines how to interpret the \n<code>from</code>\n path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#globoptions"><code>globOptions</code></a><p class="description mobile"><code>{Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Object}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left"><a href="https://github.com/sindresorhus/globby#options">Options</a>\n passed to the glob pattern matching library including \n<code>ignore</code>\n option.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#totype"><code>toType</code></a><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Determinate what is \n<code>to</code>\n option - directory, file or template.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#force"><code>force</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Overwrites files already in \n<code>compilation.assets</code>\n (usually added by other plugins/loaders).</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#flatten"><code>flatten</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Removes all directory references and only copies file names.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transform"><code>transform</code></a><p class="description mobile"><code>{Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the file contents.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#cachetransform"><code>cacheTransform</code></a><p class="description mobile"><code>{Boolean\\|String\\|Object}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean\\|String\\|Object}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Enable \n<code>transform</code>\n caching. You can use \n<code>{ cache: { key: \'my-cache-key\' } }</code>\n to invalidate the cache.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#transformpath"><code>transformPath</code></a><p class="description mobile"><code>{Function}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Function}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">Allows to modify the writing path.</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#noerroronmissing"><code>noErrorOnMissing</code></a><p class="description mobile"><code>{Boolean}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Boolean}</code></td>\n<td align="center"><code>false</code></td>\n<td align="left">Doesn\'t generate an error on missing file(s).</td>\n</tr>\n</tbody>\n</table>\n<h4><code>from</code></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Glob or path from where we сopy files.\nGlobs accept <a href="https://github.com/mrmlnc/fast-glob#pattern-syntax">fast-glob pattern-syntax</a>.\nGlob can only be a <code>string</code>.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>from</code> option if it is a <code>glob</code> (i.e <code>path\\to\\file.ext</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code>.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token string">\'relative/path/to/file.ext\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'relative/path/to/dir\'</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'file.ext\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'dir\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token comment">// If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`</span>\n        path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token string">\'*.txt\'</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5><code>For windows</code></h5>\n<p>If you define <code>from</code> as absolute file path or absolute folder path on <code>Windows</code>, you can use windows path segment (<code>\\\\</code>)</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'file.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>But you should always use forward-slashes in <code>glob</code> expressions\nSee <a href="https://github.com/mrmlnc/fast-glob#how-to-write-patterns-on-windows">fast-glob manual</a>.</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token comment">// If absolute path is a `glob` we replace backslashes with forward slashes, because only forward slashes can be used in the `glob`</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n            path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'fixtures\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token string">\'*.txt\'</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The <code>context</code> behaves differently depending on what the <code>from</code> is (<code>glob</code>, <code>file</code> or <code>dir</code>).\nMore <a href="#examples"><code>examples</code></a></p>\n<h4><code>to</code></h4>\n<p>Type: <code>String</code>\nDefault: <code>compiler.options.output</code></p>\n<p>Output path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>to</code> (i.e <code>path\\to\\dest</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'relative/path/to/dest/\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'/absolute/path/to/dest/\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'[path][name].[contenthash].[ext]\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>context</code></h4>\n<p>Type: <code>String</code>\nDefault: <code>options.context|compiler.options.context</code></p>\n<p>A path that determines how to interpret the <code>from</code> path.</p>\n<blockquote>\n<p>⚠️ Don\'t use directly <code>\\\\</code> in <code>context</code> (i.e <code>path\\to\\context</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.txt\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> <span class="token string">\'app/\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>The <code>context</code> option can be an absolute or relative path. If <code>context</code> is a relative, then it is converted to absolute based to <code>compiler.options.context</code></p>\n<p>Also, <code>context</code> indicates how to interpret the search results. Further, he is considered in this role.</p>\n<p>To determine the structure from which the found resources will be copied to the destination folder, the <code>context</code> option is used.</p>\n<p>If <code>from</code> is a file, then <code>context</code> is equal to the directory in which this file is located. Accordingly, the result will be only the file name.</p>\n<p>If <code>from</code> is a directory, then <code>context</code> is the same as <code>from</code> and is equal to the directory itself. In this case, the result will be a hierarchical structure of the found folders and files relative to the specified directory.</p>\n<p>If <code>from</code> is a glob, then regardless of the <code>context</code> option, the result will be the structure specified in the <code>from</code> option</p>\n<p>More <a href="#examples"><code>examples</code></a></p>\n<h4><code>globOptions</code></h4>\n<p>Type: <code>Object</code>\nDefault: <code>undefined</code></p>\n<p>Allows to configute the glob pattern matching library used by the plugin. <a href="https://github.com/sindresorhus/globby#options">See the list of supported options</a>\nTo exclude files from the selection, you should use <a href="https://github.com/mrmlnc/fast-glob#ignore">globOptions.ignore option</a></p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'public/**/*\'</span><span class="token punctuation">,</span>\n          globOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            dot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            gitignore<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n            ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">\'**/file.*\'</span><span class="token punctuation">,</span> <span class="token string">\'**/ignored-directory/**\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>toType</code></h4>\n<p>Type: <code>String</code>\nDefault: <code>undefined</code></p>\n<p>Determinate what is <code>to</code> option - directory, file or template.\nSometimes it is hard to say what is <code>to</code>, example <code>path/to/dir-with.ext</code>.\nIf you want to copy files in directory you need use <code>dir</code> option.\nWe try to automatically determine the <code>type</code> so you most likely do not need this option.</p>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'dir\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n has no extension or ends on \n<code>\'/\'</code></td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'file\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n is not a directory and is not a template</td>\n</tr>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><strong><code>\'template\'</code></strong><p class="description mobile"><code>{String}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{String}</code></td>\n<td align="center"><code>undefined</code></td>\n<td align="left">If \n<code>to</code>\n contains \n<a href="https://github.com/webpack-contrib/file-loader#placeholders">a template pattern</a></td>\n</tr>\n</tbody>\n</table>\n<h5><code>\'dir\'</code></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'path/to/file.txt\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'directory/with/extension.ext\'</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">\'dir\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5><code>\'file\'</code></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'path/to/file.txt\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'file/without/extension\'</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">\'file\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5><code>\'template\'</code></h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/[name].[hash].[ext]\'</span><span class="token punctuation">,</span>\n          toType<span class="token punctuation">:</span> <span class="token string">\'template\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>force</code></h4>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Overwrites files already in <code>compilation.assets</code> (usually added by other plugins/loaders).</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/**/*\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          force<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>flatten</code></h4>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Removes all directory references and only copies file names.</p>\n<blockquote>\n<p>⚠️ If files have the same name, the result is non-deterministic.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/**/*\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          flatten<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>transform</code></h4>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<p>Allows to modify the file contents.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token comment">// The `content` argument is a [`Buffer`](https://nodejs.org/api/buffer.html) object, it could be converted to a `String` to be processed using `content.toString()`</span>\n          <span class="token operator">/</span><span class="token operator">/</span> The <span class="token template-string"><span class="token string">`absoluteFrom`</span></span> argument is a `String`<span class="token punctuation">,</span> it is absolute path <span class="token keyword">from</span> where the file is being copied\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>cacheTransform</code></h4>\n<p>Type: <code>Boolean|String|Object</code>\nDefault: <code>false</code></p>\n<p>Enable/disable and configure caching.\nDefault path to cache directory: <code>node_modules/.cache/copy-webpack-plugin</code>.</p>\n<h5><code>Boolean</code></h5>\n<p>Enables/Disable <code>transform</code> caching.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          cacheTransform<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5><code>String</code></h5>\n<p>Enables <code>transform</code> caching and setup cache directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token comment">// Should be absolute</span>\n          cacheTransform<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'cache-directory\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h5><code>Object</code></h5>\n<p>Enables <code>transform</code> caching and setup cache directory and invalidation keys.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          cacheTransform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'cache-directory\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            keys<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n              <span class="token comment">// May be useful for invalidating cache based on external values</span>\n              <span class="token operator">/</span><span class="token operator">/</span> For example<span class="token punctuation">,</span> you can invalid cache based on <span class="token template-string"><span class="token string">`process.version`</span></span> <span class="token operator">-</span> <span class="token punctuation">{</span> node<span class="token punctuation">:</span> process<span class="token punctuation">.</span>version <span class="token punctuation">}</span>\n              key<span class="token punctuation">:</span> <span class="token string">\'value\'</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>You can setup invalidation keys using a function.</p>\n<p>Simple function:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          cacheTransform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'cache-directory\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            keys<span class="token punctuation">:</span> <span class="token punctuation">(</span>defaultCacheKeys<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token function">getCustomCacheInvalidationKeysSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n              <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>defaultCacheKeys<span class="token punctuation">,</span>\n                keys<span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Async function:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transform</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token function">optimize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          cacheTransform<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            directory<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'cache-directory\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            keys<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>defaultCacheKeys<span class="token punctuation">,</span> absoluteFrom<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n              <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCustomCacheInvalidationKeysAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n              <span class="token keyword">return</span> <span class="token punctuation">{</span>\n                <span class="token operator">...</span>defaultCacheKeys<span class="token punctuation">,</span>\n                keys<span class="token punctuation">,</span>\n              <span class="token punctuation">}</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h4><code>transformPath</code></h4>\n<p>Type: <code>Function</code>\nDefault: <code>undefined</code></p>\n<p>Allows to modify the writing path.</p>\n<blockquote>\n<p>⚠️ Don\'t return directly <code>\\\\</code> in <code>transformPath</code> (i.e <code>path\\to\\newFile</code>) option because on UNIX the backslash is a valid character inside a path component, i.e., it\'s not a separator.\nOn Windows, the forward slash and the backward slash are both separators.\nInstead please use <code>/</code> or <code>path</code> methods.</p>\n</blockquote>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transformPath</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> absolutePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token string">\'newPath\'</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/*.png\'</span><span class="token punctuation">,</span>\n          to<span class="token punctuation">:</span> <span class="token string">\'dest/\'</span><span class="token punctuation">,</span>\n          <span class="token function">transformPath</span><span class="token punctuation">(</span>targetPath<span class="token punctuation">,</span> absolutePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">\'newPath\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3><code>noErrorOnMissing</code></h3>\n<p>Type: <code>Boolean</code>\nDefault: <code>false</code></p>\n<p>Doesn\'t generate an error on missing file(s);</p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'missing-file.txt\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          noErrorOnMissing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3>Options</h3>\n<table>\n<thead>\n<tr>\n<th align="center">Name</th>\n<th align="center">Type</th>\n<th align="center">Default</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align="center"><div class="title"><p>Name</p><p>Type</p><p>Default</p><p>Description</p></div>\n<div class="content"><p><a href="#concurrency"><code>concurrency</code></a><p class="description mobile"><code>{Number}</code></p></p></div></td>\n<td align="center" class="description desktop"><code>{Number}</code></td>\n<td align="center"><code>100</code></td>\n<td align="left">Limits the number of simultaneous requests to fs</td>\n</tr>\n</tbody>\n</table>\n<h4><code>concurrency</code></h4>\n<p>limits the number of simultaneous requests to fs</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>patterns<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      options<span class="token punctuation">:</span> <span class="token punctuation">{</span> concurrency<span class="token punctuation">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h3>Examples</h3>\n<h4>Different variants <code>from</code> (<code>glob</code>, <code>file</code> or <code>dir</code>).</h4>\n<p>Take for example the following file structure:</p>\n<pre><code>src/directory-nested/deep-nested/deepnested-file.txt\nsrc/directory-nested/nested-file.txt\n</code></pre>\n<h5>From is a Glob</h5>\n<p>Everything that you specify in <code>from</code> will be included in the result:</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'src/directory-nested/**/*\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">src/directory-nested/deep-nested/deepnested-file.txt,\nsrc/directory-nested/nested-file.txt\n</code></pre>\n<p>If you want only content <code>src/directory-nested/</code>, you should only indicate <code>glob</code> in <code>from</code>. The path to the folder in which the search should take place, should be moved to <code>context</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'directory-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<h5>From is a Dir</h5>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'directory-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<p>Technically, this is <code>**/*</code> with a predefined context equal to the specified directory.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'**/*\'</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'directory-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">deep-nested/deepnested-file.txt,\nnested-file.txt\n</code></pre>\n<h5>From is a File</h5>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>\n            __dirname<span class="token punctuation">,</span>\n            <span class="token string">\'src\'</span><span class="token punctuation">,</span>\n            <span class="token string">\'directory-nested\'</span><span class="token punctuation">,</span>\n            <span class="token string">\'nested-file.txt\'</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">nested-file.txt\n</code></pre>\n<p>Technically, this is a filename with a predefined context equal to <code>path.dirname(pathToFile)</code>.</p>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">\'nested-file.txt\'</span><span class="token punctuation">,</span>\n          context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">,</span> <span class="token string">\'directory-nested\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<p>Result:</p>\n<pre><code class="hljs language-txt">nested-file.txt\n</code></pre>\n<h4>Ignoring files</h4>\n<p><strong>webpack.config.js</strong></p>\n<pre><code class="hljs language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">CopyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>\n            path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'src\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\\\/g</span><span class="token punctuation">,</span> <span class="token string">\'/\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token string">\'**/*\'</span>\n          <span class="token punctuation">)</span><span class="token punctuation">,</span>\n          globOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n              <span class="token comment">// Ignore all `txt` files</span>\n              <span class="token string">\'**/*.txt\'</span><span class="token punctuation">,</span>\n              <span class="token comment">// Ignore all files in all subdirectories</span>\n              <span class="token string">\'**/subdir/**\'</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n<h2>Contributing</h2>\n<p>Please take a moment to read our contributing guidelines if you haven\'t yet done so.</p>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/.github/CONTRIBUTING.md">CONTRIBUTING</a></p>\n<h2>License</h2>\n<p><a href="https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/LICENSE">MIT</a></p>\n'}}]);